type Option {
  name: String!
  Img: String
  percent: Int
}

type Election {
  _id: ID!
  title: String!
  start: String!
  end: String!
  options: [Option!]!
  hasImg: Boolean
}

input OptionInput {
  name: String!
  imgUrl: String
}

input ElectionInput {
  title: String!
  start: String!
  end: String!
  options: [OptionInput]!
  hasImg: Boolean
}

type House {
  _id: ID!
  flatNo: Int!
}

input HouseInput {
  no: Int!
}

type User {
  _id: ID!
  nationalNO: String
  firstName: String
  lastName: String
  email: String
  phone: String
  role: String
  position: String
  house: House
  password: String
}

type LoggedinUser {
  accessToken: String!
  user: User!
}

input UserInput {
  nationalNO: String!
  firstName: String!
  lastName: String!
  email: String
  phone: String!
  role: String!
  position: String
  houseId: String
}

input UserUpdateInput {
  _id: String!
  firstName: String
  lastName: String
  email: String
  phone: String
  role: String
  position: String
  houseId: String
}

input VoteInput {
  electionId: String!
  vote: String!
}

type Vote {
  electionId: String!
  userId: String!
  vote: String!
  _id: String
}

type VoteElection {
  elections: [Election!]
  votes: [Vote!]
}

input TImage1 {
    data: String
    contentType: String
    name: String
  }

type TImage2 {
  data: String!
  contentType: String!
  name: String!
}

input DocInput {
  image: TImage1
  title: String
  description: String
  duration: Int
  id: String
}

type Doc {
  _id: String
  title: String
  description: String
  image: TImage2
}

type RootQuery {
  houses: [House!]!
  vacants(role: String!): [House!]!
  users(role: String!): [User!]!
  user: User!
  elections: [Election!]!
  votes(electionId: String!): [Vote!]!
  vote: VoteElection
  docs: [Doc!]
}

type RootMutation {
  createHouse(houseInput: HouseInput): House
  createUser(userInput: UserInput): String
  updateUser(userInput: UserUpdateInput): String
  deleteUser(userId: String): Int
  deleteAllUsers: Int
  deleteHouse(id: String!): Int
  login(nationalNO: String!, password: String!): LoggedinUser
  createElection(election: ElectionInput): String
  deleteElection(id: String!): Int
  updateVote(voteInput: VoteInput): VoteElection
  deleteVote(id: String!): Int
  createAndUpdateDoc(docInput: DocInput!): String
  deleteDoc(id: String!): Boolean
}

schema {
  query: RootQuery
  mutation: RootMutation
}
